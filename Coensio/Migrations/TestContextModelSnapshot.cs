// <auto-generated />
using System;
using Coensio.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Coensio.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodingQuestionTest", b =>
                {
                    b.Property<int>("CodingQuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("coding_questions_id");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer")
                        .HasColumnName("tests_id");

                    b.HasKey("CodingQuestionsId", "TestsId")
                        .HasName("pk_coding_question_test");

                    b.HasIndex("TestsId")
                        .HasDatabaseName("ix_coding_question_test_tests_id");

                    b.ToTable("coding_question_test", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.CodingQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("UnitTests")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit_tests");

                    b.HasKey("Id")
                        .HasName("pk_coding_questions");

                    b.ToTable("coding_questions", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.CodingQuestionUserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<int>("CodingQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("coding_question_id");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_coding_question_user_answers");

                    b.HasIndex("CodingQuestionId")
                        .HasDatabaseName("ix_coding_question_user_answers_coding_question_id");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_coding_question_user_answers_test_id");

                    b.ToTable("coding_question_user_answers", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.FreeTextQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("SampleAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sample_answer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_free_text_questions");

                    b.ToTable("free_text_questions", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.FreeTextQuestionUserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FreeTextQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("free_text_question_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_free_text_question_user_answers");

                    b.HasIndex("FreeTextQuestionId")
                        .HasDatabaseName("ix_free_text_question_user_answers_free_text_question_id");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_free_text_question_user_answers_test_id");

                    b.ToTable("free_text_question_user_answers", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.MultipleChoiceQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<char>("Answer")
                        .HasColumnType("character(1)")
                        .HasColumnName("answer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_multiple_choice_questions");

                    b.ToTable("multiple_choice_questions", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.MultipleChoiceQuestionUserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<char>("Answer")
                        .HasColumnType("character(1)")
                        .HasColumnName("answer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MultipleChoiceQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("multiple_choice_question_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_mcq_user_answers");

                    b.HasIndex("MultipleChoiceQuestionId")
                        .HasDatabaseName("ix_mcq_user_answers_multiple_choice_question_id");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_mcq_user_answers_test_id");

                    b.ToTable("mcq_user_answers", (string)null);
                });

            modelBuilder.Entity("Coensio.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("FreeTextQuestionTest", b =>
                {
                    b.Property<int>("FreeTextQuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("free_text_questions_id");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer")
                        .HasColumnName("tests_id");

                    b.HasKey("FreeTextQuestionsId", "TestsId")
                        .HasName("pk_free_text_question_test");

                    b.HasIndex("TestsId")
                        .HasDatabaseName("ix_free_text_question_test_tests_id");

                    b.ToTable("free_text_question_test", (string)null);
                });

            modelBuilder.Entity("MultipleChoiceQuestionTest", b =>
                {
                    b.Property<int>("MultipleChoiceQuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("multiple_choice_questions_id");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer")
                        .HasColumnName("tests_id");

                    b.HasKey("MultipleChoiceQuestionsId", "TestsId")
                        .HasName("pk_multiple_choice_question_test");

                    b.HasIndex("TestsId")
                        .HasDatabaseName("ix_multiple_choice_question_test_tests_id");

                    b.ToTable("multiple_choice_question_test", (string)null);
                });

            modelBuilder.Entity("CodingQuestionTest", b =>
                {
                    b.HasOne("Coensio.Entities.CodingQuestion", null)
                        .WithMany()
                        .HasForeignKey("CodingQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coding_question_test_coding_questions_coding_questions_id");

                    b.HasOne("Coensio.Entities.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coding_question_test_tests_tests_id");
                });

            modelBuilder.Entity("Coensio.Entities.CodingQuestionUserAnswer", b =>
                {
                    b.HasOne("Coensio.Entities.CodingQuestion", "CodingQuestion")
                        .WithMany()
                        .HasForeignKey("CodingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coding_question_user_answers_coding_questions_coding_questi");

                    b.HasOne("Coensio.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coding_question_user_answers_tests_test_id");

                    b.Navigation("CodingQuestion");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Coensio.Entities.FreeTextQuestionUserAnswer", b =>
                {
                    b.HasOne("Coensio.Entities.FreeTextQuestion", "FreeTextQuestion")
                        .WithMany()
                        .HasForeignKey("FreeTextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_free_text_question_user_answers_free_text_questions_free_te");

                    b.HasOne("Coensio.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_free_text_question_user_answers_tests_test_id");

                    b.Navigation("FreeTextQuestion");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Coensio.Entities.MultipleChoiceQuestionUserAnswer", b =>
                {
                    b.HasOne("Coensio.Entities.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany()
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mcq_user_answers_multiple_choice_questions_multiple_choice_");

                    b.HasOne("Coensio.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mcq_user_answers_tests_test_id");

                    b.Navigation("MultipleChoiceQuestion");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("FreeTextQuestionTest", b =>
                {
                    b.HasOne("Coensio.Entities.FreeTextQuestion", null)
                        .WithMany()
                        .HasForeignKey("FreeTextQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_free_text_question_test_free_text_questions_free_text_quest");

                    b.HasOne("Coensio.Entities.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_free_text_question_test_tests_tests_id");
                });

            modelBuilder.Entity("MultipleChoiceQuestionTest", b =>
                {
                    b.HasOne("Coensio.Entities.MultipleChoiceQuestion", null)
                        .WithMany()
                        .HasForeignKey("MultipleChoiceQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_multiple_choice_question_test_multiple_choice_questions_mul");

                    b.HasOne("Coensio.Entities.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_multiple_choice_question_test_tests_tests_id");
                });
#pragma warning restore 612, 618
        }
    }
}
